### builder
# Build the binary
# TODO this needs to match go.mod. Unsure how they can be
# kept in sync.
FROM --platform=$BUILDPLATFORM golang:1.24 AS builder

ARG GOPATH
ARG GOCACHE

ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH

RUN printf "Building for TARGETPLATFORM=${TARGETPLATFORM}" \
    && printf ", TARGETARCH=${TARGETARCH}" \
    && printf ", TARGETOS=${TARGETOS}" \
    && printf ", TARGETVARIANT=${TARGETVARIANT} \n" \
    && printf "With 'uname -s': $(uname -s) and 'uname -m': $(uname -m)"

WORKDIR /workspace

# TODO
# We currently have a lot of variance in directory structure.
# This is annoying for Dockerfile design; we can't just consistently
# copy the same set of files. Enforcing pkg/ and internal/ only across
# the board would maybe help.
# Original also had this copying to GOPATH, e.g.
# COPY cmd $GOPATH/src/github.com/OpenCHAMI/power-control/v2/cmd
# I've encountered enough Dockerfiles that just copy it to workdir
COPY cmd cmd
COPY api api
COPY internal internal
COPY go.mod go.mod
COPY go.sum go.sum

# TODO
# These are more for the final image. Unsure if we need them for build.
COPY configs configs
COPY scripts scripts
COPY migrations migrations

# Build
# TODO goreleaser has a bunch of provenance args this isn't currently handling
ARG TAG
ARG COMMIT
ARG REPO_INFO

RUN mkdir bin

# TODO this should work to speed up builds on a host that already has packages, but it's
# inexplicably causing "go build" to complain that the cmd/power-control dir doesn't exist
#--mount=type=cache,target=$GOPATH/pkg/mod \
#--mount=type=cache,target=$GOCACHE \
# TODO attempting to CGO_ENABLED=0 here makes module downloads angry about deps of deps, e.g.
# /home/rainest/go/pkg/mod/github.com/!cray-!h!p!e/hms-trs-kafkalib/v2@v2.0.2/pkg/trs-kafkalib/library.go:39:24: undefined: kafka.Message
# not sure what's special about that lib--it is vendored in hms-trs-kafkalib, but idk why vendored dep handling
# would break _only_ when not using CGO
# TODO
# Debug symbols. Somehow make this optional so that debug and normal can share builders
#-gcflags=all="-N -l" \
RUN GOOS=linux GOARCH="${TARGETARCH}" GO111MODULE=on go build -v -o bin/power-control ./cmd/power-control

### release image
# TODO seems kinda off that we don't pin wolfi or tini, but whatever
FROM chainguard/wolfi-base:latest

RUN set -ex \
    && apk update \
    && apk add --no-cache tini \
    && rm -rf /var/cache/apk/*  \
    && rm -rf /tmp/*

WORKDIR /
COPY --from=builder /workspace/bin/power-control /usr/local/bin/
COPY configs configs
COPY migrations migrations

#nobody 65534:65534
USER 65534:65534

CMD /usr/local/bin/power-control

ENTRYPOINT ["/sbin/tini", "--"]
